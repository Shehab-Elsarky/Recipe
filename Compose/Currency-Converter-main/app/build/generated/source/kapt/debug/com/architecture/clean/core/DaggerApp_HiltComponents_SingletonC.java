// Generated by Dagger (https://dagger.dev).
package com.architecture.clean.core;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.recipe.data.repository.RecipeRepositoryImp;
import com.example.recipe.data.restful.RecipeApi;
import com.example.recipe.data.source.RecipeRemoteDataSourceImpl;
import com.example.recipe.di.NetworkModule;
import com.example.recipe.di.NetworkModule_ProvideServicesApi$recipe_debugFactory;
import com.example.recipe.domain.mapper.RecipeListMapper;
import com.example.recipe.domain.usecase.RecipeListUseCase;
import com.example.recipe.ui.activity.RecipeActivity;
import com.example.recipe.ui.fragment.emoney_update.RecipeDetailsFragment;
import com.example.recipe.ui.fragment.emoney_update.RecipeDetailsFragment_MembersInjector;
import com.example.recipe.ui.fragment.emoney_update.RecipeDetailsViewModel;
import com.example.recipe.ui.fragment.emoney_update.RecipeDetailsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.recipe.ui.fragment.recipe_list.RecipeListFragment;
import com.example.recipe.ui.fragment.recipe_list.RecipeListViewModel;
import com.example.recipe.ui.fragment.recipe_list.RecipeListViewModel_HiltModules_KeyModule_ProvideFactory;
import com.examples.core.data.di.NetworkModule_LoggingInterceptorFactory;
import com.examples.core.data.di.NetworkModule_ProvidesGsonConverterFactoryFactory;
import com.examples.core.data.di.NetworkModule_ProvidesGsonFactory;
import com.examples.core.data.di.NetworkModule_ProvidesOkHttpClientFactory;
import com.examples.core.data.di.NetworkModule_ProvidesRetrofitFactory;
import com.examples.core.data.mapper.CloudErrorMapper;
import com.examples.core.ui.dialog.BaseNetworkingDialog;
import com.examples.core.ui.fragment.BaseUiHelper;
import com.examples.core.ui.fragment.NetworkBaseFragment_MembersInjector;
import com.examples.core.ui.view_model.BaseViewModel;
import com.examples.core.ui.view_model.BaseViewModel_HiltModules_KeyModule_ProvideFactory;
import com.google.gson.Gson;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApp_HiltComponents_SingletonC extends App_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private volatile Object gson = new MemoizedSentinel();

  private volatile Object gsonConverterFactory = new MemoizedSentinel();

  private volatile Object httpLoggingInterceptor = new MemoizedSentinel();

  private volatile Object okHttpClient = new MemoizedSentinel();

  private volatile Object retrofit = new MemoizedSentinel();

  private DaggerApp_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private Gson gson() {
    Object local = gson;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = gson;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_ProvidesGsonFactory.providesGson();
          gson = DoubleCheck.reentrantCheck(gson, local);
        }
      }
    }
    return (Gson) local;
  }

  private GsonConverterFactory gsonConverterFactory() {
    Object local = gsonConverterFactory;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = gsonConverterFactory;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_ProvidesGsonConverterFactoryFactory.providesGsonConverterFactory(gson());
          gsonConverterFactory = DoubleCheck.reentrantCheck(gsonConverterFactory, local);
        }
      }
    }
    return (GsonConverterFactory) local;
  }

  private HttpLoggingInterceptor httpLoggingInterceptor() {
    Object local = httpLoggingInterceptor;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = httpLoggingInterceptor;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_LoggingInterceptorFactory.loggingInterceptor();
          httpLoggingInterceptor = DoubleCheck.reentrantCheck(httpLoggingInterceptor, local);
        }
      }
    }
    return (HttpLoggingInterceptor) local;
  }

  private OkHttpClient okHttpClient() {
    Object local = okHttpClient;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = okHttpClient;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_ProvidesOkHttpClientFactory.providesOkHttpClient(httpLoggingInterceptor());
          okHttpClient = DoubleCheck.reentrantCheck(okHttpClient, local);
        }
      }
    }
    return (OkHttpClient) local;
  }

  private Retrofit retrofit() {
    Object local = retrofit;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = retrofit;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_ProvidesRetrofitFactory.providesRetrofit(gsonConverterFactory(), okHttpClient());
          retrofit = DoubleCheck.reentrantCheck(retrofit, local);
        }
      }
    }
    return (Retrofit) local;
  }

  private RecipeApi recipeApi() {
    return NetworkModule_ProvideServicesApi$recipe_debugFactory.provideServicesApi$recipe_debug(retrofit());
  }

  private RecipeRemoteDataSourceImpl recipeRemoteDataSourceImpl() {
    return new RecipeRemoteDataSourceImpl(recipeApi());
  }

  private RecipeRepositoryImp recipeRepositoryImp() {
    return new RecipeRepositoryImp(recipeRemoteDataSourceImpl());
  }

  @Override
  public void injectApp(App app) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder();
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder networkModule(NetworkModule networkModule) {
      Preconditions.checkNotNull(networkModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder networkModule(com.examples.core.data.di.NetworkModule networkModule) {
      Preconditions.checkNotNull(networkModule);
      return this;
    }

    public App_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerApp_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private final class ActivityRetainedCBuilder implements App_HiltComponents.ActivityRetainedC.Builder {
    @Override
    public App_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl();
    }
  }

  private final class ActivityRetainedCImpl extends App_HiltComponents.ActivityRetainedC {
    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl() {

    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder();
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private final class ActivityCBuilder implements App_HiltComponents.ActivityC.Builder {
      private Activity activity;

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public App_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(activity);
      }
    }

    private final class ActivityCImpl extends App_HiltComponents.ActivityC {
      private ActivityCImpl(Activity activity) {

      }

      @Override
      public void injectRecipeActivity(RecipeActivity recipeActivity) {
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerApp_HiltComponents_SingletonC.this.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder());
      }

      @Override
      public Set<String> getViewModelKeys() {
        return SetBuilder.<String>newSetBuilder(3).add(BaseViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(RecipeDetailsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(RecipeListViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder();
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder();
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder();
      }

      private final class FragmentCBuilder implements App_HiltComponents.FragmentC.Builder {
        private Fragment fragment;

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public App_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCI(fragment);
        }
      }

      private final class FragmentCI extends App_HiltComponents.FragmentC {
        private FragmentCI(Fragment fragment) {

        }

        @Override
        public void injectRecipeDetailsFragment(RecipeDetailsFragment recipeDetailsFragment) {
          injectRecipeDetailsFragment2(recipeDetailsFragment);
        }

        @Override
        public void injectRecipeListFragment(RecipeListFragment recipeListFragment) {
          injectRecipeListFragment2(recipeListFragment);
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return ActivityCImpl.this.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder();
        }

        private RecipeDetailsFragment injectRecipeDetailsFragment2(RecipeDetailsFragment instance) {
          NetworkBaseFragment_MembersInjector.injectBaseNetworkingDialog(instance, new BaseNetworkingDialog());
          RecipeDetailsFragment_MembersInjector.injectFragmentHelper(instance, new BaseUiHelper());
          return instance;
        }

        private RecipeListFragment injectRecipeListFragment2(RecipeListFragment instance) {
          NetworkBaseFragment_MembersInjector.injectBaseNetworkingDialog(instance, new BaseNetworkingDialog());
          return instance;
        }

        private final class ViewWithFragmentCBuilder implements App_HiltComponents.ViewWithFragmentC.Builder {
          private View view;

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public App_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCI(view);
          }
        }

        private final class ViewWithFragmentCI extends App_HiltComponents.ViewWithFragmentC {
          private ViewWithFragmentCI(View view) {

          }
        }
      }

      private final class ViewCBuilder implements App_HiltComponents.ViewC.Builder {
        private View view;

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public App_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCI(view);
        }
      }

      private final class ViewCI extends App_HiltComponents.ViewC {
        private ViewCI(View view) {

        }
      }
    }

    private final class ViewModelCBuilder implements App_HiltComponents.ViewModelC.Builder {
      private SavedStateHandle savedStateHandle;

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public App_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(savedStateHandle);
      }
    }

    private final class ViewModelCImpl extends App_HiltComponents.ViewModelC {
      private volatile Provider<BaseViewModel> baseViewModelProvider;

      private volatile Provider<RecipeDetailsViewModel> recipeDetailsViewModelProvider;

      private volatile Provider<RecipeListViewModel> recipeListViewModelProvider;

      private ViewModelCImpl(SavedStateHandle savedStateHandle) {

      }

      private Provider<BaseViewModel> baseViewModelProvider() {
        Object local = baseViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(0);
          baseViewModelProvider = (Provider<BaseViewModel>) local;
        }
        return (Provider<BaseViewModel>) local;
      }

      private Provider<RecipeDetailsViewModel> recipeDetailsViewModelProvider() {
        Object local = recipeDetailsViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(1);
          recipeDetailsViewModelProvider = (Provider<RecipeDetailsViewModel>) local;
        }
        return (Provider<RecipeDetailsViewModel>) local;
      }

      private CloudErrorMapper cloudErrorMapper() {
        return new CloudErrorMapper(DaggerApp_HiltComponents_SingletonC.this.gson());
      }

      private RecipeListUseCase recipeListUseCase() {
        return new RecipeListUseCase(cloudErrorMapper(), DaggerApp_HiltComponents_SingletonC.this.recipeRepositoryImp(), new RecipeListMapper());
      }

      private RecipeListViewModel recipeListViewModel() {
        return new RecipeListViewModel(recipeListUseCase());
      }

      private Provider<RecipeListViewModel> recipeListViewModelProvider() {
        Object local = recipeListViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(2);
          recipeListViewModelProvider = (Provider<RecipeListViewModel>) local;
        }
        return (Provider<RecipeListViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(3).put("com.examples.core.ui.view_model.BaseViewModel", (Provider) baseViewModelProvider()).put("com.example.recipe.ui.fragment.emoney_update.RecipeDetailsViewModel", (Provider) recipeDetailsViewModelProvider()).put("com.example.recipe.ui.fragment.recipe_list.RecipeListViewModel", (Provider) recipeListViewModelProvider()).build();
      }

      private final class SwitchingProvider<T> implements Provider<T> {
        private final int id;

        SwitchingProvider(int id) {
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.examples.core.ui.view_model.BaseViewModel 
            return (T) new BaseViewModel();

            case 1: // com.example.recipe.ui.fragment.emoney_update.RecipeDetailsViewModel 
            return (T) new RecipeDetailsViewModel();

            case 2: // com.example.recipe.ui.fragment.recipe_list.RecipeListViewModel 
            return (T) ViewModelCImpl.this.recipeListViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private final class ServiceCBuilder implements App_HiltComponents.ServiceC.Builder {
    private Service service;

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public App_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(service);
    }
  }

  private final class ServiceCImpl extends App_HiltComponents.ServiceC {
    private ServiceCImpl(Service service) {

    }
  }
}
