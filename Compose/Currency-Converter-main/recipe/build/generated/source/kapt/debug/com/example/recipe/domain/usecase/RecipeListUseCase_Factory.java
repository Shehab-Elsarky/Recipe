// Generated by Dagger (https://dagger.dev).
package com.example.recipe.domain.usecase;

import com.example.recipe.data.repository.RecipeRepository;
import com.example.recipe.domain.mapper.RecipeListMapper;
import com.examples.core.data.mapper.CloudErrorMapper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RecipeListUseCase_Factory implements Factory<RecipeListUseCase> {
  private final Provider<CloudErrorMapper> errorUtilProvider;

  private final Provider<RecipeRepository> recipeRepositoryProvider;

  private final Provider<RecipeListMapper> mapperProvider;

  public RecipeListUseCase_Factory(Provider<CloudErrorMapper> errorUtilProvider,
      Provider<RecipeRepository> recipeRepositoryProvider,
      Provider<RecipeListMapper> mapperProvider) {
    this.errorUtilProvider = errorUtilProvider;
    this.recipeRepositoryProvider = recipeRepositoryProvider;
    this.mapperProvider = mapperProvider;
  }

  @Override
  public RecipeListUseCase get() {
    return newInstance(errorUtilProvider.get(), recipeRepositoryProvider.get(), mapperProvider.get());
  }

  public static RecipeListUseCase_Factory create(Provider<CloudErrorMapper> errorUtilProvider,
      Provider<RecipeRepository> recipeRepositoryProvider,
      Provider<RecipeListMapper> mapperProvider) {
    return new RecipeListUseCase_Factory(errorUtilProvider, recipeRepositoryProvider, mapperProvider);
  }

  public static RecipeListUseCase newInstance(CloudErrorMapper errorUtil,
      RecipeRepository recipeRepository, RecipeListMapper mapper) {
    return new RecipeListUseCase(errorUtil, recipeRepository, mapper);
  }
}
