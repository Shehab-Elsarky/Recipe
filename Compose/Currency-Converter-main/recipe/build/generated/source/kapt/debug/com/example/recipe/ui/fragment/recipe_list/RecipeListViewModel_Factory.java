// Generated by Dagger (https://dagger.dev).
package com.example.recipe.ui.fragment.recipe_list;

import com.example.recipe.domain.usecase.RecipeListUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RecipeListViewModel_Factory implements Factory<RecipeListViewModel> {
  private final Provider<RecipeListUseCase> recipeListUseCaseProvider;

  public RecipeListViewModel_Factory(Provider<RecipeListUseCase> recipeListUseCaseProvider) {
    this.recipeListUseCaseProvider = recipeListUseCaseProvider;
  }

  @Override
  public RecipeListViewModel get() {
    return newInstance(recipeListUseCaseProvider.get());
  }

  public static RecipeListViewModel_Factory create(
      Provider<RecipeListUseCase> recipeListUseCaseProvider) {
    return new RecipeListViewModel_Factory(recipeListUseCaseProvider);
  }

  public static RecipeListViewModel newInstance(RecipeListUseCase recipeListUseCase) {
    return new RecipeListViewModel(recipeListUseCase);
  }
}
